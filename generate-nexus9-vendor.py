#!/usr/bin/python2
#
# Copyright (c) 2021 XdevL. All rights reserved.
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.
#
import argparse
from contextlib import contextmanager
import os
from os.path import basename, dirname, join, normpath, relpath, splitext 
import re
import shutil
import subprocess
import sys
import time
import urllib
import zipfile

scriptName = basename(__file__)
scriptDir = dirname(os.path.realpath(__file__))
header = "# %s\n# This file has been generated by %s\n"% (time.strftime("%c"), scriptName)
excludedApps = ["Music", "MusicFX", "QuickSearchBox"]
googleApps = ["GoogleLoginService", "GoogleServicesFramework", "Phonesky", "PrebuiltGmsCore"]
# The Google play services from the latest Nexus 9 factory image crashes if it doesn't have
# some permissions and it makes it impossible to upadate it without granting them
googlePerm = "google-permissions.xml"

def filename(path, ext = None):
  if ext is None:
    return basename(path)
  else:
    return splitext(basename(path))[0] + ext

def makedirs(directory, wipe = False):
  if wipe or not os.path.exists(directory):
    shutil.rmtree(directory, ignore_errors = True)
    os.makedirs(directory)
    
def copy(src, dst):
  makedirs(os.path.dirname(dst))
  shutil.copy(src, dst)
  
def match(symbol, patterns):
  for pattern in patterns:
    if re.match(pattern, symbol):
      return True
  return False

@contextmanager
def tmpFile(path):
  try:
    yield path
  finally:
      os.remove(path)

@contextmanager
def tmpDir(path):
  try:
    makedirs(path, True)
    yield path
  finally:
    shutil.rmtree(path, ignore_errors = True)

@contextmanager
def unsparse(src, dst):
  print("Unsparsing %s..." % src)
  with tmpFile(join(dst, filename(src, ".raw"))) as target:
    subprocess.check_call(["simg2img", src, target])
    yield target

@contextmanager
def extractExt4(src, dst):
  print("Processing %s..." % src)
  with tmpDir(join(dst, filename(src, ""))) as target:
    with open(os.devnull, "w") as devnull:
      subprocess.check_call(["debugfs", "-R", "rdump / %s" % target, src], stderr = devnull)
    yield target

@contextmanager
def extractImg(name, srczip, dst):
  print("Extracting %s..." % name)
  with zipfile.ZipFile(srczip) as z:
    with tmpFile(join(dst, name)) as simg:
      z.extract(name, dirname(simg))
      with unsparse(simg, dst) as img:
        with extractExt4(img, dst) as root:
          yield root
        
def filesOfImg(name, srczip, dst, exclude = []):
  with extractImg(name, srczip, dst) as ext4:
    for root, dirs, files in os.walk(ext4):
      for entry in files:
        if not match(entry, exclude):
          yield (ext4, relpath(join(root, entry), ext4))


parser = argparse.ArgumentParser()
parser.add_argument("directory", help = "The root of the AOSP directory where to create the vendor files")
parser.add_argument("url", help = "Url of the factory image from which extract the vendor partition")
parser.add_argument("--with-google-apps", action="store_true", help = "Whether or not to include the Google service apps")
parser.add_argument("--with-adb-debug", action="store_true", help = "Makes ADB enabled by default and doesn't require user confirmation. Only effective for userdebug and eng builds")

if len(sys.argv) < 2:
  parser.print_help()
  sys.exit(1)

args = parser.parse_args()
aospDir = args.directory
url = args.url
withGoogleApps = args.with_google_apps
withAdbDebug = args.with_adb_debug

updatezip = join(scriptDir, basename(url))
if not os.path.isfile(updatezip):
  print("Downloading %s..." % url)
  urllib.urlretrieve(url, updatezip)

vendorDir = join(aospDir, "vendor")
deviceDir = join(vendorDir, "htc", "flounder")
makedirs(deviceDir, True)
with tmpDir(join(scriptDir, filename(url, ""))) as tmpdir:
  with zipfile.ZipFile(updatezip) as z:
    for entry in z.namelist():
      if re.match(".*/bootloader-.+\.img", entry):
        bootloader = z.extract(entry, tmpdir)
        shutil.move(bootloader, join(deviceDir, basename(bootloader)))
      elif re.match(".*/image-.+\.zip", entry):
        imgzip = z.extract(entry, tmpdir)
        
  if withGoogleApps:
      googleDir = join(vendorDir, "google")
      makedirs(googleDir, False)
      # Ideally this should be saved in googleDir but build/core/tasks/vendor_module_check.mk won't have it
      with open(join(vendorDir, "Android.mk"), "w") as mk:
        mk.write(header)
        mk.write("LOCAL_PATH:= $(call my-dir)\n")
        for root, entry in filesOfImg("system.img", imgzip, tmpdir):
          name = filename(entry, "")
          if name in googleApps:
            copy(join(root, entry), googleDir)
            mk.write("include $(CLEAR_VARS)\n")
            mk.write("LOCAL_MODULE := %s\n" % name)
            mk.write("LOCAL_MODULE_OWNER := google\n")
            mk.write("LOCAL_SRC_FILES := google/%s.apk\n" % name)
            mk.write("LOCAL_CERTIFICATE := PRESIGNED\n")
            mk.write("LOCAL_MODULE_TAGS := optional\n")
            mk.write("LOCAL_MODULE_CLASS := APPS\n")
            mk.write("LOCAL_DEX_PREOPT := false\n")
            mk.write("LOCAL_MODULE_SUFFIX := .apk\n")
            mk.write("LOCAL_PRIVILEGED_MODULE := true\n")
            mk.write("include $(BUILD_PREBUILT)\n\n")
      copy(join(scriptDir, googlePerm), googleDir)
        
  with open(join(deviceDir, "device-vendor.mk"), "w") as mk:
    mk.write(header)
    mk.write("BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE := ext4\n")
    mk.write("BOARD_VENDORIMAGE_PARTITION_SIZE := %d\n" % (256 * 1024 * 1024))
    mk.write("\nPREBUILT_BOOTLOADER := %s\n" % join(relpath(deviceDir, aospDir), basename(bootloader)))
    mk.write("PREBUILT_BOOTLOADER_VERSION := %s\n" % re.search(".*-([0-9]+(\.[0-9]+)+).img", bootloader).group(1))
    mk.write("\nPRODUCT_COPY_FILES :=")
    for root, entry in filesOfImg("vendor.img", imgzip, tmpdir, [".*\.apk", ".*build.prop"]):
      copy(join(root, entry), join(deviceDir, entry))
      mk.write(" \\\n\t%s:%s:htc" % (join(relpath(deviceDir, aospDir), entry), join("/vendor", entry)))
    if withGoogleApps:
      mk.write(" \\\n\t%s:%s:google" % (join(relpath(googleDir, aospDir), googlePerm), join("system/etc/default-permissions", googlePerm)))
      mk.write("\n\nPRODUCT_PACKAGES += %s\n" % " ".join(googleApps))
    mk.write("PACKAGES.framework.OVERRIDES := %s\n" % " ".join(excludedApps))
    if withAdbDebug:
      mk.write("\nADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=0 \\\n\tpersist.sys.usb.config=mtp,adb\n")
